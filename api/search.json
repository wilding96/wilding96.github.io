[{"id":"d14f1b56244a23ff94e44d5f440a2776","title":"work-log","content":"最近整体架构变动中需要把某一个Vue项目（后面简称B项目）的部分内容迁移到项目A中，其中包含多个页面和功能，在此记录下。\n先整体分析下有哪些内容需要迁移过来，大致思路是迁移页面的–&gt;路由模块–&gt;页面内容–&gt;依赖相关–&gt;静态资源–&gt;配置相关\n下面开始开干，先从路由开始入手\n1.router 路由模块现在市面上流行的vue-admin等模板工程基本都有以下配置\n\n\n*简单解释下就是会自动解析router&#x2F;modules目录下的以js为后缀的文件，并以异步路由形式导出便于动态加载路由内容，通俗来说就是分模块归类路由文件 *\n所以我们在A项目的src&#x2F;router&#x2F;modules&#x2F;下面新建我们迁移的页面路由内容，这里说一下，这是后台系统，路由应该是从接口数据返回动态加载到全局的router里面，现在具体方案还没定，而且利于说明，这里直接把对应路由内容手动加载。如下图：\n\n然后就可以进行下一步页面内容的迁移了。\n2.views页面内容这一步直接把B项目需要迁移的页面内容复制到A项目views文件夹下面即可，如下图\n\nview里面的内容迁移过之后还需要把用到的components也同样从B项目复制到A项目的components文件夹下哦~\n此时如果项目已经在运行的话，已经会有错误报出，xxx is undefined 或者 not found 即缺少页面内容所需要的依赖，这就到了我们常见的vue项目运行问题中的场景，也就到了下一步，处理项目依赖相关问题。\n3.依赖相关在控制台中出现xxx未找到 或者已经提示需要npm install xxx之后，我们就可以按照提示进行相关依赖的安装，根据自己情况使用npm&#x2F;cnpm&#x2F;pnpm安装缺少的依赖即可。\n安装好依赖，重新npm run dev编译，接下来可能会出现类型下图的报错\n4.静态资源\n这种就是静态资源路径访问有问题了，我们需要把对应的静态资源也迁移过来，放置到可以正确访问的路径下即可， 这一步没什么难度，但因为迁移的项目复杂度不一样，替换的内容会多一点，多点耐心，哪个文件引入有问题就处理哪个文件即可。\n这步通常会遇到页面内引入资源包括但不限于：css文件，js文件，api方法文件，一般把B项目中用到的文件复制到A项目中即可解决。\n通常情况下，以上4步处理完，访问我们本次新增的路由后，页面已经可以打开，但是控制台会有很多报错，如下图：\n\n已经看到胜利的曙光了！\n接下来就把控制台报错一个一个解决就行啦，这里的问题我统称为配置相关，即最后一步，也是最复杂的一部。\n5.配置相关\n这个报错是因为B项目使用axios请求方法和A项目的方法不一致，只要保证两个项目使用统一请求配置即可。\n\n这种即为使用子组件未找到，看下components里是否缺失该组件，缺失的话补上即可。\n———-我是分割线———-\n\n\n\n\n\n\n\n\n\n本次迁移需求为合并两个项目内容，节省服务器资源，减少跨项目跳转和相关配置的坑。以上基本上是迁移的整个过程，仅供参考学习，有不足的地方也欢迎各位补充。\n","slug":"work-log","date":"2023-04-13T03:20:03.000Z","categories_index":"","tags_index":"日常记录","author_index":"Dylan"},{"id":"b5f2756a6fc815e7272f6737954d5877","title":"bpmn-compare","content":"Activiti Modeler WebEditor（v5?）网上文档较少，也都很古老，经过考古整理如下：\n这版应该是界面布局：上（工具区）、左（组件类目）、右（工作区）、右下（属性区）\nActiviti Modeler内部的实现上还是以oryx为图形组件为内核，用angular.js作为界面基本元素的基础组件以及调度oryx的API。\n下面开始正文\n1️⃣ 流对象（Flow Objects）流对象是最为基础的概念了，十分重要。\n1.1 事件（Events）事件都是用一个圆圈来代表，影响流程的流动，一般有一个原因（trigger）或者一个影响（result）。标准定义了三种事件：开始，中间和结束。从定义和分类名称上来看也能猜到事件的作用了，控制流程的开始，中间流转和结束，这些控制可能采取触发器（trigger）来完成，或者是导致一个结果（结束或抛出）。\n开始事件\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n中间事件 Intermediate event中间事件的使用有两种方式：\n1.出于两种目的在一个正常的工作流中放置中间事件：中间事件可以用于“catch”事件触发器，或者是“throw”事件触发器。\n2.一个中间事件放置于一个活动(Activity)中间，仅能够用于“catch”事件触发器，也就是捕获一个事件，做相应的处理。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n结束事件 End Event结束事件必须是一个顺序流的目标，不能是源头，可以有多个顺序流指向同一个结束流。一个流程可以有多个结束事件，也可以没有结束事件，但是如果存在开始事件，就必须有至少一个结束事件。如果不使用结束事件,那么所有流对象没有任何流出序列（顺序）流（即不同为一个源序列流）来标志流程过程结束。流程不会结束，直到所有的并行路径完成了。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n1.2 活动（Activities）Tasks 任务task在流程流中是一个原子性的活动，当流程中的作业不能被打断时task被用作一个更细级别的细节。通常，一个终端用户或者应用其执行操作表现为task的形式。task对象在子流程中具有相同的形状，都是长方形有着圆角。\n有三种特殊的task图标：循环、多重实例和补偿，一个task可能会有一个或两个这类图标。\n\n这些任务中，需要人参与自身完成的有Manual Task和User Task。Manual Task是一个不受任何商业流程引擎管理的任务，User Task是。不受管理意味着流程引擎无法追踪其任务的开始和完成。\nSub-Processes 子流程子流程是一个活动的内部细节建模，使用活动、事件和网关以及序列流。子流程是流程内部的一个图形对象，但是它也能够被打开来展现更低一层的流程。子流程定义了一个上下文范围，可用于属性可见性、事务的范围，异常处理，事件或者是补偿。\nCall Activity 调用活动调用活动确定使用了全局流程或者全局任务的流程中的一点。调用过程用作为包装器来调用全局流程或全局任务执行中。激活调用活动将导致称为全局流程或者全局任务的控制转移。\n调用活动必须满足数据要求，同时调用CallableElement返回数据。这意味着在活动的InputOutputSpecification中需要包含这些元素，并且必须精确的和CallableElement的元素匹配。这些元素包括：DataInputs、DataOutputs、InputSets、OutputSets。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n1.3网关（Gateways）网关用于控制序列流如何在一个流程中收敛和发散的交互。如果一个流程不需要控制，那么网关就是非必需的。“网关”一词意味着有一个门机制。允许或不允许通过网关——也就是说，执行到网关的时候，当网关机制被调用，输入可以被合并在一起，或者输出分离成若干部分。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n2️⃣数据（Data）传统的流程建模要求能够模拟物品（物理或信息的）在流程中的创建、操作和执行过程。重要的方面就是能够捕获数据的结构，并且查询或者操作结构。\n\n\n\n\n\n\n\n\n\nBPMN\n\n3️⃣ 连接对象（Connecting Objects）\n\n\n类型\n含义\n3\n\n\n\n序列流(SequenceFlow)\n序列流定义了活动的执行顺序。\n─────》\n\n\n联系(Association)\n将一个文本注释与一个元素联系起来。\n———–&gt;\n\n\n4️⃣ 泳道（Swimlanes）4.1 池子（Pools）池是一个容器，与其他的池相隔离。通常用在交互流程中。池主要作用于两个独立的实体或者参与者之间的物理划分。各个池中的活动通常是有自身的流程的。因此，顺序流通常不会越过多个池，而消息流是可以的。\n4.2 泳道（Lanes）Pool的子划分，可以垂直或者水平，用来对活动的组织和分类。Lane更加接近我们传统的泳道的概念。Lane常用来将活动按照角色划分，流程可以在一个pool中跨Lane流转，但是在一个pool中一般不会这样（出处与上面相同）。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n5️⃣ 工件（Artifacts）5.1 组（Group）将一部分元素按逻辑或特定目的进行分组，便于查看和管理，用于解释和描述目的，不会影响流程的流转（出处同上）。\n5.2 文字注释（Text Annotation）提供一些附加性的文本信息给流程图的阅读者。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n\n————————-我是分割线———————–\n属性配置相关上面是一些基础功能的介绍（参考某些大佬们的文档），下面是也很重要的属性配置相关简单的介绍。\n\n\n\n\n\n\n\n\n\nActiviti\n\n\n\n\n\n\n\n\n\n\nBPMN\n\n","slug":"bpmn-compare","date":"2022-08-04T09:34:00.000Z","categories_index":"","tags_index":"日常记录","author_index":"Dylan"},{"id":"9fd14fe00f284de4b49821647a08d25c","title":"el-datepicker","content":"需求： 默认选择近一个月，根据DefaultTimeRange字段获取默认查询时长，最多查询日期范围为两年的时间\n原版本\n\n\n\n\n\n\n\n\n\nhtml\n&lt;el-date-picker\n    v-model&#x3D;&quot;timeRange&quot;\n    :range-separator&#x3D;&quot;null&quot;\n    class&#x3D;&quot;filter-item search-item date-range-item&quot;\n    end-placeholder&#x3D;&quot;结束日期&quot;\n    format&#x3D;&quot;yyyy-MM-dd&quot;\n    start-placeholder&#x3D;&quot;开始日期&quot;\n    type&#x3D;&quot;daterange&quot;\n    value-format&#x3D;&quot;yyyy-MM-dd&quot;\n    :picker-options&#x3D;&quot;pickerOptions&quot;\n&#x2F;&gt;\n\n\n\n\n\n\n\n\n\njs\n&#x2F;&#x2F; el-date-picker配置项\n  pickerOptions: &#123;\n    disabledDate(time) &#123;\n      &#x2F;&#x2F;根据当前日期 --- 禁止选中之后的日期\n      return time.getTime() &gt; Date.now()\n    &#125;,\n    onPick(time) &#123;\n      &#x2F;&#x2F; 仅允许筛选近两年的数据\n      this.$nextTick(() &#x3D;&gt; &#123;\n        &#x2F;&#x2F; time.minDate -- 选中开始的时间\n        let start &#x3D; new Date(time.minDate)\n        let end &#x3D; new Date(time.maxDate)\n        &#x2F;&#x2F; console.log(start, end , end - start);\n        if (end - start &gt; 3600 * 1000 * 24 * 2 * 365) &#123;\n          that.$message.info(&quot;仅允许筛选近两年的数据&quot;)\n          start &#x3D; new Date()\n          end &#x3D; new Date().valueOf() - 3600 * 1000 * 24 * 365 * 2\n          that.timeRange[0] &#x3D; new Date(end)\n            .toLocaleDateString()\n            .replaceAll(&quot;&#x2F;&quot;, &quot;-&quot;)\n          that.timeRange[1] &#x3D; start\n            .toLocaleDateString()\n            .replaceAll(&quot;&#x2F;&quot;, &quot;-&quot;)\n          that.fetchTable()\n          that.fetchScrapCount()\n        &#125;\n      &#125;)\n      &#x2F;&#x2F; 关闭--时间控件下拉框\n    &#125;\n  &#125;,\n\n&#x2F;&#x2F; 查询表格\nfetchTable(params &#x3D; &#123;&#125;) &#123;\n  this.loading &#x3D; true\n  if (this.timeRange &amp;&amp; this.timeRange.length) &#123;\n    this.queryParams.model.startTime &#x3D; this.timeRange[0]\n    this.queryParams.model.endTime &#x3D; this.timeRange[1]\n  &#125; else &#123;\n    this.queryParams.model.startTime &#x3D; &quot;&quot;\n    this.queryParams.model.endTime &#x3D; &quot;&quot;\n  &#125;\n\n  ...请求\n&#125;,\n\n\n\n\n\n\n\n\n\nbug\n1.可直接输入超过2年范围的时间2.时间限制不严谨，应该按月来计算修改后代码\n\n\n\n\n\n\n\n\n利用momentjs和整理需求 二次封装element-ui的date-picker组件\n\n\n\n\n\n\n\n\n\nhtml\n\n&lt;!-- 日期范围选择 --&gt;\n&lt;HCDatePickRange\n  ref&#x3D;&quot;HCDataPickRangeDom&quot;\n  @datePickCallBack&#x3D;&quot;datePickCallBack&quot;\n&#x2F;&gt;\n\n\n\n\n\n\n\n\n\n\njs\n&#x2F;**\n* datepick组件传递CallBack\n* @param &#123;Array&#125; timeRange - 时间范围\n* @param &#123;Boolean&#125; isNeed - 是否需要直接重新获取数据\n*&#x2F;\ndatePickCallBack(timeRange, isNeedLoad &#x3D; false) &#123;\n  this.timeRange &#x3D; timeRange\n  if(isNeedLoad) &#123;\n    this.getAllData()\n  &#125;\n&#125;,\n\n&#x2F;&#x2F; 组件内容\n\n&#x2F;&#x2F; 初始化timeRange\n    initParams() &#123;\n      return [\n        moment()\n          .subtract(this.DefaultTimeRange, &quot;months&quot;)\n          .format(&quot;YYYY-MM-DD&quot;),\n        moment().format(&quot;YYYY-MM-DD&quot;)\n      ]\n    &#125;,\n    &#x2F;&#x2F; 获取默认时间范围\n    async getDefaultTimeRange() &#123;\n      await Setting.getValue(&#123; key: &quot;DefaultTimeRange&quot; &#125;).then(res &#x3D;&gt; &#123;\n        if (res.status &#x3D;&#x3D; 200) &#123;\n          this.DefaultTimeRange &#x3D; Number(res.data.data)\n          this.timeRange &#x3D; this.initParams()\n          this.$emit(&quot;datePickCallBack&quot;, this.timeRange, true)\n        &#125;\n      &#125;)\n    &#125;,\n    &#x2F;&#x2F; 用户确认选定的值时触发\n    pickerChange() &#123;\n      let min &#x3D; moment(this.timeRange[0])\n      let max &#x3D; moment(this.timeRange[1])\n      this.timeRequire(min, max)\n    &#125;,\n    &#x2F;&#x2F; 日期选择校验\n    timeRequire(min, max) &#123;\n      &#x2F;&#x2F; console.log(min, max, 91)\n      if (max &amp;&amp; min &amp;&amp; max.diff(min, &quot;years&quot;, true) &gt; 2) &#123;\n        this.$message.info(&quot;筛选时间跨度不能超过两年&quot;)\n        let newRange &#x3D; []\n        newRange[0] &#x3D; moment()\n          .subtract(2, &quot;years&quot;)\n          .format(&quot;YYYY-MM-DD&quot;)\n        newRange[1] &#x3D; moment().format(&quot;YYYY-MM-DD&quot;)\n        &#x2F;&#x2F; 重新赋值让日期控件回显筛选条件\n        this.timeRange.splice(0, 2)\n        this.timeRange.push(...newRange)\n        &#x2F;&#x2F; 选择超出2年\n        this.$emit(&quot;datePickCallBack&quot;, newRange, true)\n      &#125; else &#123;\n        this.$emit(&quot;datePickCallBack&quot;, this.timeRange, false)\n      &#125;\n    &#125;,\n    &#x2F;&#x2F; 重新赋值让日期控件回显筛选条件\n    resetTimeRange() &#123;\n      this.timeRange.splice(0, 2)\n      this.timeRange.push(...this.initParams())\n    &#125;\n\n","slug":"el-datepicker","date":"2022-04-14T07:19:00.000Z","categories_index":"","tags_index":"日常记录","author_index":"Dylan"},{"id":"f60ede68dc7165577531ba0535048c4c","title":"grafana","content":"前言grafana是一款功能强大的数据可视化软件，支持多种数据源。本文将介绍如何配置grafana开发环境，可对其进行汉化等处理。\n如果不二次开发，可参照文档直接安装已编译的版本：https://grafana.com/grafana/download\n下文介绍的配置方法可用于修改grafana源码\n开发环境：MacOS\ngrafana 依赖 node 和 go ，需要先安装好 node 和 go。\n一.安装 node我这里的 grafana 是 7.5， 需要 14 版本的 node\n安装 node 有两种方式\n1.如果之前没有装过，直接 brew install node 就可以了，这样安装的 node 默认是最新版本，如果需要指定版本，可以在 node 后 通过 @ 来指定安装某个版本。\n2.通过版本管理神器 n 来升级\nnpm i n -g  &#x2F;&#x2F; 安装 node 版本管理神器\nn -V &#x2F;&#x2F; 安装后查看 n 的版本\nn latest &#x2F;&#x2F; 使用或安装最新的官方发布：\nn stable &#x2F;&#x2F; 使用或安装稳定的正式版本：\nn lts &#x2F;&#x2F; 使用或安装最新的LTS正式版本：\n安装好 node 后顺便升级下 npm\nnpm i npm@latest -g\n编辑.npmrc\n$ vi ~/.npmrc\n添加如下内容（设置淘宝镜像）：\nsass_binary_site &#x3D; https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;\nphantomjs_cdnurl &#x3D; https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;phantomjs&#x2F;\nregistry &#x3D; http:&#x2F;&#x2F;registry.npm.taobao.org\n\n二.安装 go通过 brew 安装 go\nbrew install go  // 安装 golang\n然后查看 go 的环境变量配置\ngo env\n上面的命令默认得到如下信息\nGOARCH&#x3D;&quot;amd64&quot;\nGOBIN&#x3D;&quot;&quot;\nGOCACHE&#x3D;&quot;&#x2F;Users&#x2F;wilding&#x2F;Library&#x2F;Caches&#x2F;go-build&quot;\nGOENV&#x3D;&quot;&#x2F;Users&#x2F;wilding&#x2F;Library&#x2F;Application Support&#x2F;go&#x2F;env&quot;\nGOEXE&#x3D;&quot;&quot;\nGOFLAGS&#x3D;&quot;&quot;\nGOHOSTARCH&#x3D;&quot;amd64&quot;\nGOHOSTOS&#x3D;&quot;darwin&quot;\nGOINSECURE&#x3D;&quot;&quot;\nGOMODCACHE&#x3D;&quot;&#x2F;Users&#x2F;wilding&#x2F;go&#x2F;pkg&#x2F;mod&quot;\nGONOPROXY&#x3D;&quot;&quot;\nGONOSUMDB&#x3D;&quot;&quot;\nGOOS&#x3D;&quot;darwin&quot;\nGOPATH&#x3D;&quot;&#x2F;Users&#x2F;wilding&#x2F;go&quot;\nGOPRIVATE&#x3D;&quot;&quot;\nGOPROXY&#x3D;&quot;https:&#x2F;&#x2F;goproxy.cn&quot;\nGOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;go&#x2F;1.16.4&#x2F;libexec&quot;\nGOSUMDB&#x3D;&quot;sum.golang.org&quot;\nGOTMPDIR&#x3D;&quot;&quot;\nGOTOOLDIR&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;go&#x2F;1.16.4&#x2F;libexec&#x2F;pkg&#x2F;tool&#x2F;darwin_amd64&quot;\nGOVCS&#x3D;&quot;&quot;\nGOVERSION&#x3D;&quot;go1.16.4&quot;\nGCCGO&#x3D;&quot;gccgo&quot;\nAR&#x3D;&quot;ar&quot;\nCC&#x3D;&quot;clang&quot;\nCXX&#x3D;&quot;clang++&quot;\nCGO_ENABLED&#x3D;&quot;1&quot;\nGOMOD&#x3D;&quot;&#x2F;dev&#x2F;null&quot;\nCGO_CFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_CPPFLAGS&#x3D;&quot;&quot;\nCGO_CXXFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_FFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_LDFLAGS&#x3D;&quot;-g -O2&quot;\nPKG_CONFIG&#x3D;&quot;pkg-config&quot;\nGOGCCFLAGS&#x3D;&quot;-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length&#x3D;0 -fdebug-prefix-map&#x3D;&#x2F;var&#x2F;folders&#x2F;yr&#x2F;qz8g29fn26d94f79sc1ncr040000gn&#x2F;T&#x2F;go-build1846110959&#x3D;&#x2F;tmp&#x2F;go-build -gno-record-gcc-switches -fno-common&quot;\n注意 GOPATH 地址，在 “&#x2F;Users&#x2F;wilding&#x2F;go”下，其中 wilding 是我的用户名。wilding 下是没有 go 这个文件夹，需要我们自己建立。\n假如我们想写一个 go 的hello world，就需要把这个程序放到 go 目录下。\n假如想要修改 GOPATH 也是可以的。用如下命令：\nvim ~/.bash_profile \n添加如下代码：export GOPATH&#x3D;”XXXXXXXXXX”然后快捷键 shift + zz 关闭文件\n到这一步，go 就算安装到我们的电脑里了。\n三.下载grafana源码从GitHub上获取代码，地址 https://github.com/grafana/grafana ，切换分支到稳定版本7.5.7，基于该版本进行二次开发。\nclone完我们需要的代码后，就可以开始编译。\n开始编译\n$ yarn config set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD 1\n$ yarn install --pure-lockfile\n$ yarn start\n\n四.启动前后端环境在上述操作后yarn start后会如图所示（或者类似的），这时候在项目里的public&#x2F;build&#x2F;里已经有编译后的文件了\n\n接下来就是后端环境了分别输入\ngo run build.go setupgo run build.go build\n编译完成后，会看到项目里多了个bin文件夹\n\n然后输入(如果和笔者bin底下的文件夹名字不一致，只要运行到最后一层的grafana-server就行，这是关键）\n./bin/darwin-amd64/grafana-server\n然后出现\n\n访问http://localhost:3000 输入初始账号admin和初始密码admin\n\n———-大功告成———–\n","slug":"grafana","date":"2021-06-02T03:06:00.000Z","categories_index":"","tags_index":"日常记录","author_index":"Dylan"}]